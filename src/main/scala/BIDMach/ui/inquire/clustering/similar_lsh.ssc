/*
Requires loading embed.ssc first
Need its genVec function
Please set useGPU to be false if running a machine without GPU
*/

import scala.collection.mutable.ListBuffer
:silent

val useGPU = true

Mat.useCache = true
val dir = "/data/livejournal/"
val edir = dir + "preds_newtrainfinalfull/"
val w = loadSBMat(dir + "sentences/masterDict.sbmat")
val cs = CSMat(w)
val tmpm = loadFMat(dir+"indexing/lsh/vectors.fmat.lz4")
val mm = if (useGPU) GMat(tmpm) else tmpm

val em = GMat(loadFMat(dir+"indexing/lsh/cluster_0_0.fmat.lz4")) //Sample one embedding

def getSent(id:SMat) = {
    val w = cs(IMat(find3(id)._3)-1).data
    val res = if (w.length>0) w.reverse.reduce(_+" "+_) else "@ERROR! EMPTY RESULTS"
    res
}

val tmp = IMat(1,mm.nrows)
tmp(0) = 1
for(i<-1 until mm.nrows) tmp(i) = (tmp(i-1) * 2) % 1007

def queryV(v:GMat) = {
    val code = IMat(FMat(tmp * ((mm * v)>=0)))
    val cid = code(0) % mm.nrows
    println(cid)
    val len = sqrt(snorm(v))
    val res = new ListBuffer[(Float,Int,Int)]
    for(fileId<-List(cid)){
        var cur = 0
        while (cur < 5000 && new java.io.File(dir + ("indexing/lsh/cluster_%d_%d.fmat.lz4" format (fileId,cur))).exists){
            em <-- loadFMat(dir + ("indexing/lsh/cluster_%d_%d.fmat.lz4" format (fileId,cur)))
            val ids = loadIMat(dir + ("indexing/lsh/cluster_%d_%d.imat.lz4" format (fileId,cur)))
            val dis = v^*em/sqrt(snorm(em))/len
            val (gn,gt) = sortdown2(dis.t)
            val top = IMat(gt(0->20))
            val num = FMat(gn(0->20))
            (0 until 20).foreach(i=>{
                res += ((num.data(i),ids(0,top(i)),ids(1,top(i))))
            })
            cur += 1
        }
        println("Queried #%d cluster with %d files" format (fileId,cur))
    }
    println("--------RESULTS-----------")
    res.sortBy(_._1).reverse.take(20).foreach(x=>{
        val sent = loadSMat(dir+("srcdst/src%04d.smat.lz4" format x._2))
        println("%.6f %s" format (x._1,getSent(sent(?,x._3))))
    })
}

:silent

def querys(s:String) = {
    flip
    queryV(genVec(s))
    println("Query takes %.3fs" format flop._2)
}

